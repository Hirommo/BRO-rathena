prontera,153,177,5	script	Kafra BrasilRO	758,{
	set .n$, "^0033FF[ Kafra BrasilRO ]^000000";
	set $@JC_MinimumJB, 40; //Minimum job level for changing between 2nd and advance Class (Default : 40)
	set $@JC_Plat, 1; //Give Platinum skills on Jobchange (Default : 1-yes)
	set $@JC_SupNovM, 45; //Base Level to change into Super Novice (Default : 45)

	mes .n$;
	emotion e_kis;
	mes "Olá, "+ strcharinfo(0) +"!";
	mes "Em contrato exclusivo com o ^0099FFBrasil Ragnarök Online^000000 estou aqui para ajudá-lo em muitos serviços essênciais.";
	mes "^777777Diga em que posso te ajudar?^000000";
	next;
	switch(select("^00CC00•^000000 Salvar Ponto de Retorno.","^00CC00•^000000 Escolher Classes.","^00CC00•^000000 Escolher Classes Bebê.","^00CC00•^000000 Carrinho ^777777|^000000 Falcão ^777777|^000000 Peco.","^00CC00•^000000 Resetar.","^00CC00•^000000 Remover Habilidades.","^00CC00•^000000 Habilidades de Platina.","^00CC00•^000000 Saír.")){

		case 1: // Salvar Ponto de Retorno
			mes .n$;
			SavePoint "prontera", 156, 191;
			mes .n$;
			mes "Seu ponto de retorno foi trocado.";
			close;

		case 2: // Mestre das Classes
			mes .n$;
			if(Upper == 1 && Class >= Job_Lord_Knight){
				mes "Sinto muito, você não possui todos os requisitos para mudar de classe.";
				mes "Volte em breve!";
				close;
			}
			if(SkillPoint != 0){
				mes "Me desculpe, você tem que usar todos os seus pontos de habilidade antes de mudar de classe.";
				mes "Por favor, volte em breve!";
				close;
			}
			if(JobLevel < 10){
				mes "Sinto muito, mas você não parece que possui nivel suficiente de Job.";
				mes "Volte em breve!";
				close;
			}
			switch(Class){
				case Job_Novice_High:
				case Job_Baby:
				case Job_Novice:
					skill 142,1,0;
					skill 143,1,0;
					mes "Bem-vindo, por favor selecione a classe em que você deseja se transformar.";
					if(lastJob != 0 && Class == Job_Novice_High){
						switch(lastJob){
							case Job_Knight:
							case Job_Crusader:
								set @target_job, Job_Swordman_High;
								break;
							case Job_Monk:
							case Job_Priest:
								set @target_job, Job_Acolyte_High;
								break;
							case Job_Alchemist:
							case Job_Blacksmith:
								set @target_job, Job_Merchant_High;
								break;
							case Job_Rogue:
							case Job_Assassin:
								set @target_job, Job_Thief_High;
								break;
							case Job_Wizard:
							case Job_Sage:
								set @target_job, Job_Mage_High;
								break;
							case Job_Hunter:
							case Job_Bard:
							case Job_Dancer:
								set @target_job, Job_Archer_High;
								break;
									}
					} else {
						switch(select("^00CC00•^000000 Espadachim.","^00CC00•^000000 Mago.","^00CC00•^000000 Arqueiro.","^00CC00•^000000 Noviço.","^00CC00•^000000 Mercador.","^00CC00•^000000 Gatuno.","^00CC00•^000000 Super Aprendiz.","^00CC00•^000000 Taekwon.","^00CC00•^000000 Guns.","^00CC00•^000000 Ninja.")){
								case 7:
									if(Class == Job_Novice_High){
										mes .n$;
										mes "Sinto muito, você não possui todos os requisitos para mudar de classe.";
										mes "Volte em breve!";
										close;
									}
									if($@JC_SupNovM > BaseLevel){
										mes .n$;
										mes "Sinto muito, mas você não parece que possui nivel suficiente de Base.";
										mes "Volte em breve!";
										close;
									}
									if(Upper == 2)
										set @target_job, Job_Super_Baby;
									else
										set @target_job, Job_SuperNovice;
									break;
								case 8:
									if(Class == Job_Novice_High){
										mes .n$;
										mes "Sinto muito, você não possui todos os requisitos para mudar de classe.";
										mes "Volte em breve!";
										close;
									}
									if(Upper == 2){
										mes .n$;
										mes "Sinto muito, você não possui todos os requisitos para mudar de classe.";
										mes "Volte em breve!";
										close;
									}
									set @target_job, Job_Taekwon;
									break;
								case 9:
								case 10:
									if(Class == Job_Novice_High || Upper == 2){
										mes .n$;
										mes "Sinto muito, você não possui todos os requisitos para mudar de classe.";
										mes "Volte em breve!";
										close;
									}
									set @target_job, @menu + 15;
									break;
								default:
									set @target_job, @menu;
									if(Class == Job_Novice_High) set @target_job, @target_job + 4001;
									break;
							}
					}
					mes "Tem certeza de que quer se transformar em " + JobName(@target_job) + "?";
					if(select("^00CC00•^000000 Não.","^00CC00•^000000 Sim.") == 2){
						callfunc "Job_Change", @target_job;
						if(@target_job == Job_Gunslinger || @target_job == Job_Ninja || @target_job == Job_Taekwon) {
							callfunc "F_ClearJobVar";
						} else {
							if($@JC_Plat) goto L_GivePlat;
						}
					}
					close;
					break;
				default:
					if(JobLevel < $@JC_MinimumJB){
						mes .n$;
						mes "Sinto muito, mas você não parece que possui nivel suficiente de Job.";
						mes "Volte em breve!";
						close;
					}
					deletearray @job_opt, getarraysize(@job_opt);
					if(Class < Job_Knight || Class == Job_Taekwon || (Class > Job_Baby && Class < Job_Baby_Knight) || (Class > Job_Novice_High && Class < Job_Lord_Knight)){
						if(lastJob != 0){
							set @target_job, lastJob + 4001;
						} else {
							switch(Class){
								case Job_Swordman_High:
								case Job_Baby_Swordman:
								case Job_Swordman:
									set @job_opt[0], Job_Knight;
									set @job_opt[1], Job_Crusader;
									break;
								case Job_Mage_High:
								case Job_Baby_Mage:
								case Job_Mage:
									set @job_opt[0], Job_Wizard;
									set @job_opt[1], Job_Sage;
									break;
								case Job_Archer_High:
								case Job_Baby_Archer:
								case Job_Archer:
									set @job_opt[0], Job_Hunter;
									if(Sex == 0)
										set @job_opt[1], Job_Dancer;
									else
										set @job_opt[1], Job_Bard;
									break;
								case Job_Acolyte_High:
								case Job_Baby_Acolyte:
								case Job_Acolyte:
									set @job_opt[0], Job_Priest;
									set @job_opt[1], Job_Monk;
									break;
								case Job_Merchant_High:
								case Job_Baby_Merchant:
								case Job_Merchant:
									set @job_opt[0], Job_Blacksmith;
									set @job_opt[1], Job_Alchemist;
									break;
								case Job_Thief_High:
								case Job_Baby_Thief:
								case Job_Thief:
									set @job_opt[0], Job_Assassin;
									set @job_opt[1], Job_Rogue;
									break;						
								default:
									set @job_opt[0], Job_Star_Gladiator;
									set @job_opt[1], Job_Soul_Linker;
									break;
							}
							mes "Bem-vindo, por favor selecione a classe em que você deseja se transformar.";
							set @target_job, @job_opt[select(JobName(@job_opt[0]), JobName(@job_opt[1]))-1];
							if(Class > Job_Novice_High && Class < Job_Lord_Knight) set @target_job, @target_job + 4001;
						}
						mes "Você têm certeza que você deseja se transformar em " + JobName(@target_job) + "?";
						if(select("^00CC00•^000000 Não.","^00CC00•^000000 Sim.") == 2){
							callfunc "Job_Change", @target_job;
							if(@target_job == Job_Star_Gladiator || @target_job == Job_Soul_Linker) {
								callfunc "F_ClearJobVar";
							} else {
								if($@JC_Plat) goto L_GivePlat;
							}
						}
						close;
					}
					if(checkfalcon() || checkcart() || checkriding()){
						mes .n$;
						mes "Por favor, remova o seu carrinho, falcão ou peco.";
						mes "Volte em breve!";
						close;
					}
					if((Class >=Job_Knight) && (Class <=Job_Crusader2)){
						mes "Você quer renascer?";
						if(select("^00CC00•^000000 Sim.","^00CC00•^000000 Não.") == 1){
							if(BaseLevel < 99 || JobLevel < 50){
								mes .n$;
								mes "Sinto muito, você não possui todos os requisitos para mudar de classe.";
								mes "Volte em breve!";
								close;
							}
							set lastJob, Class;
							if(Class == Job_Knight2){
								set lastJob, Job_Knight;
							} else {
								if(Class == Job_Crusader2){
									set lastJob, Job_Crusader;
								}
							}
							jobchange Job_Novice_High;
							resetlvl(1);
							skill 142,1,0;
							skill 143,1,0;
						}
						close;
					}
			}
			mes "Sinto muito, não há mais como mudar de classe.";
			close;

		case 3: // Mestre das Classes Bebê
			if((Class == 0) && (JobLevel >9)){
				mes .n$;
				mes "JobLevel: "+ JobLevel;
				mes "Class: "+Class;
				switch(select("^00CC00•^000000 Baby Novice.","^00CC00•^000000 Nada.")){
					case 1:
						jobchange 4023;
						break;
					case 2:
						mes "Volte quando precisar!";
						break;
				}
			}else if((Class == 4023) && (JobLevel >9)){
				switch(select("^00CC00•^000000 Baby Cavaleiro.","^00CC00•^000000 Baby Mago.","^00CC00•^000000 Baby Aqueiro.","^00CC00•^000000 Baby Noviço.","^00CC00•^000000 Baby Mercador.","^00CC00•^000000 Baby Gatuno.","^00CC00•^000000 Baby Super Aprendiz.","^00CC00•^000000 Saír.")){
					case 1:
						jobchange 4024;
						break;
					case 2:
						jobchange 4025;
						break;
					case 3:
						jobchange 4026;
						break;
					case 4:
						jobchange 4027;
						break;
					case 5:
						jobchange 4028;
						break;
					case 6:
						jobchange 4029;
						break;
					case 7:
						jobchange 4045;
						break;
					case 8:
						mes "Volte quando precisar!";
						break;
				}
			}
			else if((Class == 4024) && (JobLevel >39)){
				switch(select("^00CC00•^000000 Baby Knight.","^00CC00•^000000 Baby Crusader.","^00CC00•^000000 Nada.")){
					case 1:
						jobchange 4030;
						break;
					case 2:
						jobchange 4037;
						break;
					case 3:
						mes "Volte quando precisar!";
						break;
				}
			}
			else if((Class == 4025) && (JobLevel >39)){
				switch(select("^00CC00•^000000 Baby Wizard.","^00CC00•^000000 Baby Sage.","Nada.")){
					case 1:
						jobchange 4032;
						break;
					case 2:
						jobchange 4039;
						break;
					case 3:
						mes "Volte quando precisar!";
						break;
				}
			}
			else if((Class == 4026) && (JobLevel >39)){
				switch(select("^00CC00•^000000 Baby Hunter.","^00CC00•^000000 Baby Bard.","^00CC00•^000000 Baby Dancer.","^00CC00•^000000 Nada.")){
					case 1:
						jobchange 4034;
						break;
					case 2:
						jobchange 4042;
						break;
					case 3:
						jobchange 4043;
						break;
					case 4:
						mes "Volte quando precisar!";
						break;
				}
			}
			else if((Class == 4027) && (JobLevel >39)){
				switch(select("^00CC00•^000000 Baby Priest.","^00CC00•^000000 Baby Monk.","^00CC00•^000000 Nada.")){
					case 1:
						jobchange 4031;
						break;
					case 2:
						jobchange 4038;
						break;
					case 3:
						mes "Volte quando precisar!";
						break;
				}
			}
			else if((Class == 4028) & (JobLevel > 39)){
				switch(select("^00CC00•^000000 Baby Blacksmith.","^00CC00•^000000 Baby Alchemist.","^00CC00•^000000 Nada.")){
					case 1:
						jobchange 4033;
						break;
					case 2:
						jobchange 4041;
						break;
					case 3:
						mes "Volte quando precisar!";
						break;
				}
			}
			else if((Class == 4029) && (JobLevel > 39)){
				switch(select("^00CC00•^000000 Baby Assassin.","^00CC00•^000000 Baby Rogue.","^00CC00•^000000 Nada.")){
					case 1:
						jobchange 4035;
						break;
					case 2:
						jobchange 4040;
						break;
					case 3:
						mes "Volte quando precisar!";
						break;
				}
			}
			else
			mes .n$;
			mes "Não posso ajudar você, desculpe!";
			close;
		case 4: // Garota Negociante
			mes .n$;
			mes "Olá, aqui você pode alugar Carrinhos, Falcões ou Pecos.";
			mes "Qual desses você deseja alugar?";
			next;
			switch(select("^00CC00•^000000 Carrinho.:^00CC00•^000000 Falcão.:^00CC00•^000000 Peco.")) {
				case 1:
					if((BaseClass == Job_Merchant || BaseJob == Job_SuperNovice) && checkcart() == 0 && getskilllv("MC_PUSHCART")>0) {
						setcart;
						close;
					}else{
						mes .n$;
						mes "Desculpa " + strcharinfo(0) + ", certifique-se que você possui a habilidade e se você está com a classe necessária.";
						close;
					}
				case 2:
					if(BaseJob != Job_Archer && BaseClass == Job_Archer && checkfalcon() == 0 && getskilllv("HT_FALCON")>0) {
						setfalcon;
						close;
					}else{
						mes .n$;
						mes "Desculpa " + strcharinfo(0) + ", certifique-se que você possui a habilidade e se você está com a classe necessária.";
						close;
					}					
				case 3:
					if (BaseJob != Job_Swordman && BaseClass == Job_Swordman && checkriding() == 0 && getskilllv("KN_RIDING")>0) {
						setriding;
						close;
					}else{
						mes .n$;
						mes "Desculpa " + strcharinfo(0) + ", certifique-se que você possui a habilidade e se você está com a classe necessária.";
						close;
					}
			}

		case 5: // Resetadora
			mes .n$;
			mes "Resetar Atributos: ^0000FF500.000^000000z";
			mes "Resetar Habilidades: ^0000FF500.000^000000z";
			mes "Resetar Ambos: ^0000FF900.000^000000z";
			mes "Selecione o serviço que você quer:";
			next;
			switch(select("^00CC00•^000000 Resetar Habilidades.:^00CC00•^000000 Resetar Atributos.:^00CC00•^000000 Resetar Ambos.:^00CC00•^000000 Sair.")) {
				case 1:
					mes .n$;
					if (Zeny < 500000) {
						mes "Desculpa, você não possui zeny suficiente.";
						close;
					}
					mes "Ok, aqui vamos nós..";
					set Zeny,zeny-500000;
					ResetSkill;
					close;
				case 2:
					mes .n$;
					if (Zeny < 500000) {
						mes "Desculpa, você não possui zeny suficiente.";
						close;
					}
					mes "Ok, aqui vamos nós..";
					set Zeny,zeny-500000;
					ResetStatus;
					close;
				case 3:
					mes .n$;
					if (Zeny < 900000) {
						mes "Desculpa, você não possui zeny suficiente.";
						close;
					}
					mes "Ok, aqui vamos nós..";
					set Zeny,zeny-900000;
					ResetSkill;
					ResetStatus;
					close;
				case 4:
					close;
			}

		case 6: // Removedora de Habilidades
			mes .n$;
			mes "Posso remover seus pontos de habilidades que estão sobrando. O que acha disso?";
			next;
			if(select("^00CC00•^000000 Sim.:^00CC00•^000000 Não.") == 2) close;
			next;
			mes .n$;
			if(SkillPoint < 1){
				mes "Você não possui pontos de habilidades sobrando.";
				close;
			}
			mes "Como você deseja remove-los?";
			switch(select("^00CC00•^000000 Remover Tudo.:^00CC00•^000000 Remover Quantidade.:^00CC00•^000000 Cancelar.")){
				mes .n$;
			case 1:
				mes "Pontos removidos.";
				set SkillPoint,SkillPoint - SkillPoint;
				close;
			case 2:
				mes "Digite quantos pontos você gostaria de remover.";
				input @skillpoint_qnt;
				next;
				mes .n$;
				mes "Pontos removidos.";
				set SkillPoint,SkillPoint - @skillpoint_qnt;
 				close;
			case 3:
				mes "Estarei aqui caso precisar.";
				close;
			}

		case 7: // Habilidades de Platina
			mes .n$;
			mes "Eu posso te dar as habilidades especiais para sua classe.";
			mes "Você gostaria de recebê-los agora?";
			next;
			if (select("^00CC00•^000000 Sim.:^00CC00•^000000 Não.") == 2) {
				mes .n$;
				mes "Tenha um bom dia...";
				close; 
			}
			skill 142,1,0;
			switch(BaseClass) {
				case 0: if (Class !=23) skill 143,1,0; break;
				case 1: skill 144,1,0; skill 145,1,0; skill 146,1,0; break;
				case 2: skill 157,1,0; break;
				case 3: skill 147,1,0; skill 148,1,0; break;
				case 4: skill 156,2,0; break;
				case 5: skill 153,1,0; skill 154,1,0; skill 155,1,0; break;
				case 6: skill 149,1,0; skill 150,1,0; skill 151,1,0; skill 152,1,0; break;
				default: break; }
			switch(roclass(eaclass()&EAJ_UPPERMASK)) {
				case 7: skill 1001,1,0; break;
				case 8: skill 1014,1,0; break;
				case 9: skill 1006,1,0; break;
				case 10: skill 1012,1,0; skill 1013,1,0; break;
				case 11: skill 1009,1,0; break;
				case 12: skill 1003,1,0; skill 1004,1,0; break;
				case 14: skill 1002,1,0; break;
				case 15: skill 1015,1,0; skill 1016,1,0; break;
				case 16: skill 1007,1,0; skill 1008,1,0; skill 1017,1,0; skill 1018,1,0; skill 1019,1,0; break;
				case 17: skill 1005,1,0; break;
				case 18: skill 238,1,0; break;
				case 19: skill 1010,1,0; break;
				case 20: skill 1011,1,0; break;
				default: break; }

			mes .n$;
			mes "Aqui está!";
			close;
			end;

		case 8:
			close;
}
//============================================================
// Functions (Mestre das Classes e Removedor de Habilidades)
//============================================================
L_GivePlat:
	if (BaseClass==Job_SuperNovice) goto L_sSuperN;
	if (BaseClass==Job_Swordman) goto L_sSword;
	if (BaseClass==Job_Mage) goto L_sMage;
	if (BaseClass==Job_Archer) goto L_sArcher;
	if (BaseClass==Job_Acolyte) goto L_sAcolyte;
	if (BaseClass==Job_Merchant) goto L_sMerchant;
	if (BaseClass==Job_Thief) goto L_sThief;
	close;
L_sSuperN:
	skill 142,1,0;
	close;
L_sSword:
	skill 142,1,0;
	skill 144,1,0;
	skill 145,1,0;
	skill 146,1,0;
	close;
L_sMage:
	skill 142,1,0;
	skill 157,1,0;
	close;
L_sArcher:
	skill 142,1,0;
	skill 147,1,0;
	skill 148,1,0;
	close;
L_sAcolyte:
	skill 142,1,0;
	skill 156,2,0;
	close;
L_sMerchant:
	skill 142,1,0;
	skill 153,1,0;
	skill 154,1,0;
	skill 155,1,0;
	close;
L_sThief:
	skill 142,1,0;
	skill 149,1,0;
	skill 150,1,0;
	skill 151,1,0;
	skill 152,1,0;
	close;
}
