prontera,173,201,4	script	Guerra do Emperium#prt	601,{
	doevent "WOE_CONTROL::OnMenu";
	end;
	
	OnAgitStart:
		while(agitcheck()){
			misceffect 58;
			sleep 425;
		}
		end;
}

-	script	WOE_CONTROL	-1,{
	function Disp_Owner;
	function Add_Zero;

	OnInit:
		// --------------------------------------------------------------------------------------------------------------------------------------
		set .CastleWarp,1;	// 1: Always enable all castle warps. | 0: Warp only to active castles.
		set .AutoKick,1;	// Automatically kick players from inactive castles during WOE? (1:yes / 0:no)
		set .NoOwner,0; 	// Automatically kick players from unconquered castles outside of WOE? (1:yes / 0:no)
		set .ExitWarp,0;	// Warp all players from castles when WOE ends? (1:yes / 0:no)
		set .GMAccess,99;	// GM level required to access Session Manager.
		setarray .Reward[0], 21053;	// Reward for all members of conquering guilds, per castle: <ID>{,...} (0 to disable)
		// --------------------------------------------------------------------------------------------------------------------------------------
		set .Size, getarraysize($WOE_CONTROL);
		setarray .Castles$[0], "prtg_cas01", "prtg_cas02", "prtg_cas03", "prtg_cas04", "prtg_cas05",
							   "payg_cas01", "payg_cas02", "payg_cas03", "payg_cas04", "payg_cas05",
							   "gefg_cas01", "gefg_cas02", "gefg_cas03", "gefg_cas04", "gefg_cas05",
							   "aldeg_cas01", "aldeg_cas02", "aldeg_cas03", "aldeg_cas04", "aldeg_cas05",
							   "arug_cas01", "arug_cas02", "arug_cas03", "arug_cas04", "arug_cas05",
							   "schg_cas01", "schg_cas02", "schg_cas03", "schg_cas04", "schg_cas05";
		setarray .EndLabel$[0], "ar01", "ar02", "ar03", "ar04", "ar05", "sc01", "sc02", "sc03", "sc04", "sc05";
		setarray .Days$[0], "Domingo", "Segunda-Feira", "Terça-Feira", "Quarta-Feira", "Quinta-Feira", "Sexta-Feira", "Sábado";
		setarray .Regions$[0], "Prontera", "Payon", "Geffen", "Aldebaran", "Arunafeltz", "Schwaltzvalt";
		setarray .Map$[0], "prt_gld", "pay_gld", "gef_fild13", "alde_gld", "aru_gld", "sch_gld";
		setarray .MapX[0], 134, 240, 153, 111, 208,
						   121, 295, 317, 140, 204,
						   214, 308, 143, 193, 305,
						   48, 95, 142, 239, 264,
						   158, 83, 68, 299, 292,
						   293, 288, 97, 137, 71;
		setarray .MapY[0], 65, 128, 137, 240, 240,
						   233, 116, 293, 160, 266,
						   75, 240, 240, 278, 87,
						   83, 249, 85, 242, 90,
						   272, 47, 155, 345, 107,
						   100, 252, 196, 90, 315;
		if (.AutoKick || .NoOwner) {
			for (set .@i, 0; .@i < 30; set .@i, .@i + 1) {
				setmapflag .Castles$[.@i], mf_loadevent;
				setd "." + .Castles$[.@i], .@i;
			}
		}
		if (!agitcheck() && !agitcheck2()) {
			sleep 4000;
		}
		set .Init, 1;
	OnMinute00:
		freeloop(1);
		if (agitcheck() || agitcheck2()) {
			for (set .@i, 0; .@i < .Size; set .@i, .@i + 4) {
				if (gettime(4) == $WOE_CONTROL[.@i] && gettime(3) == $WOE_CONTROL[.@i + 2]) {
					OnWOEEnd:
						announce "[Guerra do Emperium]: A Guerra do Emperium terminou.", bc_all | bc_woe;
						AgitEnd;
						AgitEnd2;
						sleep 1000;
						for(set .@j, 0; .@j < 30; set .@j, .@j + 1){
							if(.Active[0]&(1<<.@j)){
								Disp_Owner(.Castles$[.@j], 1);
							}
							if(.ExitWarp){
								maprespawnguildid .Castles$[.@j], 0, 3;
							}
						}
						if(.Reward[0] && .Active[0] && .ForceEnd != 2){
							callsub OnReward, .Active[0];
						}
						deletearray .Active[0], 2;
						if (.ForceEnd) {
							set .ForceEnd, 0;
							end;
						}
					break;
				}
			}
		}
		if((!agitcheck() && !agitcheck2()) || .Init){
			if(!agitcheck() && !agitcheck2()){
				set .Init, 0;
			}
			for (set .@i, 0; .@i < .Size; set .@i, .@i + 4) {
				if (gettime(4) == $WOE_CONTROL[.@i] && gettime(3) >= $WOE_CONTROL[.@i + 1] && gettime(3) < $WOE_CONTROL[.@i + 2]) {
					deletearray .Active[0], 2;
					set .Active[0], $WOE_CONTROL[.@i + 3];
					if (.Init) {
						AgitEnd;
						AgitEnd2;
					} else {
						announce "[Guerra do Emperium]: A Guerra do Emperium começou!", bc_all | bc_woe;
					}
					sleep 1000;
					AgitStart;
					AgitStart2;
					for (set .@j, 0; .@j < 30; set .@j, .@j + 1) {
						if (.Active[0]&(1<<.@j)) {
							if (!.Init) {
								Disp_Owner(.Castles$[.@j], 0);
							}
							set .Active[1], .Active[1] | (1<<((.@j / 5) + 1));
						} else {
							if (.@j < 20) {
								donpcevent "Agit#" + .Castles$[.@j] + "::OnAgitEnd";
								killmonster .Castles$[.@j], "Agit#" + .Castles$[.@j] + "::OnAgitBreak";
							} else {
								donpcevent "Manager#" + .Castles$[.@j] + "::OnAgitEnd2";
								killmonster .Castles$[.@j], "Steward#" + .EndLabel$[.@j - 20] + "::OnStartArena";
							}
						}
					}
					break;
				}
			}
		}
		set .Init,0;
		freeloop(0);
	end;

	function Disp_Owner {
		set .@o, getcastledata(getarg(0), 1);
		if (.@o) {
			announce "[Guerra do Emperium]: O castelo (" + getcastlename(getarg(0)) + ") " + ((getarg(1)) ? "foi conquistado" : "está ocupado") + " pela guild (" + getguildname(.@o) + ").", bc_all | bc_woe;
		} else {
			announce "[Guerra do Emperium]: O castelo (" + getcastlename(getarg(0)) + ") está atualmente desocupado.", bc_all | bc_woe;
		}
		return;
	}
	
	function Add_Zero {
		return ((getarg(0) < 10) ? "0" : "") + getarg(0) + (getarg(1, 0) ? "." : ":") + "00";
	}

	OnReward:
		for (set .@i, 0; .@i < 30; set .@i, .@i + 1){
			if (getarg(0)&(1<<.@i)) {
				set .@guild, getcastledata(.Castles$[.@i], 1);
				if (.@guild) {
					deletearray .@acc[0], getarraysize(.@acc);
					deletearray .@char[0], getarraysize(.@char);
					query_sql("SELECT account_id, char_id FROM `guild_member` WHERE guild_id = '" + .@guild + "'", .@acc, .@char);
					setarray getd("$rewardMembersCastle" + .@i + "[0]"), .@guild;	//Ning: Adiciona o clã no slot 0 do array do castelo para salvar os integrantes.
					for (set .@j, 0; .@j < getarraysize(.@acc); set .@j, .@j + 1) {
						if (isloggedin(.@acc[.@j], .@char[.@j])) { 
							set .@Random, rand(getarraysize(.@Reward) - 1);
							getitem .Reward[.@Random], 1, .@acc[.@j];
							message rid2name(.@acc[.@j]), "[Guerra do Emperium]: Você foi premiado por conquistar (" + getcastlename(.Castles$[.@i]) + ").";
							setarray getd("$rewardMembersCastle" + .@i + "[" + (.@j + 1) + "]"), .@char[.@j];	//Ning: Adiciona os players do clã a partir do slot 1.
						}
					}
				}
			}
		}
	return;

	OnPCLoadMapEvent:
		if (!compare(strcharinfo(3), "g_cas")) {
			end;
		}
		if (((.AutoKick && .Active[0]) || (.NoOwner && !getcastledata(strcharinfo(3), 1))) && !(.Active[0]&(1<<getd("." + strcharinfo(3))))) {
			if (getcharid(2) && getcastledata(strcharinfo(3),1) == getcharid(2)) {
				end;
			}
			sleep2 1000;
			message strcharinfo(0), getcastlename(strcharinfo(3)) + " is currently inactive.";
			sleep2 5000;
			if (compare(strcharinfo(3), "g_cas")) {
				warp "SavePoint", 0, 0;
			}
		}
	end;

	OnMenu:
		while(1) {
			mes "^0099FF[ Guerra do Emperium ]^000000";
			if (agitcheck() || agitcheck2()) {
				if (!.Size) {
					mes "A Guerra do Emperium está: ^0000ffAtiva^000000.";
				} else {
					for (set .@i, 0; .@i < .Size; set .@i, .@i + 4) {
						if (gettime(4) == $WOE_CONTROL[.@i] && gettime(3) >= $WOE_CONTROL[.@i + 1] && gettime(3) < $WOE_CONTROL[.@i + 2]) {
							set .@i, $WOE_CONTROL[.@i + 2];
							break;
						}
					}
					mes "A Guerra do Emperium está ativa até ^2596C2" + Add_Zero(.@i) + "^000000.";
					for (set .@i, 0; .@i < 6; set .@i, .@i + 1) {
						if (.Active[1]&(1<<(.@i+1))) {
							dispbottom "[ » " + .Regions$[.@i] + " ].";
						}
					}
				}
			} else {
				set .@j, 0;
				set .@k, 0;
				for (set .@i, 0; .@i < .Size; set .@i, .@i + 4) {
					if ((gettime(4) == $WOE_CONTROL[.@i] && gettime(3) <= $WOE_CONTROL[.@i + 1]) || gettime(4) < $WOE_CONTROL[.@i]) {
						set .@j, $WOE_CONTROL[.@i];
						set .@k, $WOE_CONTROL[.@i + 1];
						break;
					}
				}
				if (!.@j && !.@k) {
					set .@j, $WOE_CONTROL[0];
					set .@k, $WOE_CONTROL[1];
				}
				mes "A Guerra do Emperium está ^ff0000Desativada^000000.";
				if (.Size) {
					mes "A próxima Guerra do Emperium vai começar ^2596C2" + .Days$[.@j] + " às " + Add_Zero(.@k) + "^000000.";
				}
			}
			mes "^777777Selecione o que deseja fazer:^000000";
			switch(select("" + ((.CastleWarp || .Active[1]) ? "^00CC00•^000000 Teleportar para Castelos." : "") + ":^00CC00•^000000 Mostrar os Horários.:^00CC00•^000000 Ver Castelos Conquistados.:" + ((getgmlevel() < .GMAccess || !getgmlevel()) ? "" : "^00CC00•^000000 Configurar as Guerras.") + ":^00CC00•^000000 Saír.")) {
				case 1:
					set .@menu$, "";
					for (set .@i, 0; .@i < 6; set .@i, .@i + 1) {
						if (.CastleWarp || .Active[1]&(1<<(.@i + 1))) {
							set .@menu$, .@menu$ + "^00CC00•^000000 " + ((.Active[1]&(1<<(.@i + 1))) ? "^0055FF" : "^777777") + .Regions$[.@i] + " Castles^000000";
						}
						set .@menu$, .@menu$ + ":";
					}
					set .@i, select(.@menu$) - 1;
					set .@menu$, "";
					for (set .@j, .@i * 5; .@j < (.@i * 5) + 5; set .@j, .@j + 1) {
						if (.CastleWarp || .Active[0]&(1<<.@j)) {
							set .@menu$, .@menu$ + "^00CC00•^000000 " + ((.Active[0]&(1<<.@j)) ? "^0055FF" : "^777777") + getcastlename(.Castles$[.@j]) + "^000000";
						}
						set .@menu$, .@menu$ + ":";
					}
					set .@j, select(.@menu$) - 1;
					warp .Map$[.@i], .MapX[(.@i * 5) + .@j], .MapY[(.@i * 5) + .@j];
					close;
				
				case 2:
					mes "[ ^a60536Horários^000000 ]";
					if (.Size) {
						freeloop(1);
						for(set .@i, 0; .@i < .Size; set .@i, .@i + 4) {
							mes "- ^FF0000" + .Days$[$WOE_CONTROL[.@i]] + " (" + Add_Zero($WOE_CONTROL[.@i + 1]) + "-" + Add_Zero($WOE_CONTROL[.@i + 2]) + ")^000000";
							for (set .@j, 0; .@j < 30; set .@j, .@j + 1) {
								if ($WOE_CONTROL[.@i + 3]&(1<<.@j)) {
									mes " ^00CC00•^000000 " + getcastlename(.Castles$[.@j]) + " ^777777(" + .Castles$[.@j] + ")^000000";
								}
							}
							if (.@i + 4 < .Size) {
								mes " ";
							}
						}
						freeloop(0);
					} else {
						mes "Nenhum horário foi configurado.";
					}
					next;
				break;
				
				case 3:
					mes "[ ^a60536Castle Ownership^000000 ]";
					for (set .@i, 0; .@i < 6; set .@i, .@i + 1) {
						set .@k, .@i * 5;
						mes "> ^FF0000" + .Regions$[.@i] + "^000000";
						for (set .@j, .@k; .@j < (.@k + 5); set .@j, .@j + 1) { 
							set .@t, getcastledata(.Castles$[.@j], 1);
							mes " ^00CC00•^000000 " + getcastlename(.Castles$[.@j]) + ": " + ((.@t) ? "^0055FF" + getguildname(.@t) : "^777777unoccupied") + "^000000";
						}
						if (.@i < 5) {
							mes " ";
						}
					}
					next;
					break;
				case 4:
					while(1) {
						mes "[ ^a60536Session Manager^000000 ]";
						mes "There are ^0055FF" + (.Size / 4) + " session(s)^000000 configured.";
						mes "Oque você gostaria de fazer?";
						next;
						switch(select("^00CC00•^000000 Add a session...:^00CC00•^000000 Delete a session...:^00CC00•^000000 Reload settings...:" + ((agitcheck() || agitcheck2()) ? "^00CC00•^000000 End WOE session..." : "") + ":^00CC00•^000000 ^777777Go back^000000")) {
							case 1:
								mes "[ ^a60536New Session^000000 ]";
								if (.Size > 127) {
									mes "You have already reached the maximum of 32 sessions.";
									next;
									break;
								}
								mes "Selecione o dia.";
								next;
								set .@Day, select("^00CC00•^000000 " + implode(.Days$, ":^00CC00•^000000 ")) - 1;
								mes "[ ^a60536New Session^000000 ]";
								mes "Select a start time for ^0055FF" + .Days$[.@Day] + "^000000.";
								next;
								set .@menu$, "";
								for (set .@i, 0; .@i < 23; set .@i, .@i + 1) {
									set .@menu$, .@menu$ + "^00CC00•^000000 " + Add_Zero(.@i, 1) + ":";
								}
								set .@Start, select(.@menu$) - 1;
								mes "[ ^a60536New Session^000000 ]";
								mes "Select an end time for ^0055FF" + .Days$[.@Day] + "^000000.";
								next;
								set .@menu$, "";
								for (set .@i, .@Start + 1; .@i < 24; set.@i, .@i + 1) {
									set .@menu$, .@menu$ + "^00CC00•^000000 " + Add_Zero(.@i, 1) + ":";
								}
								set .@End, select(.@menu$) + .@Start;
								for(set .@i, 0; .@i < .Size; set .@i, .@i + 4) {
									if (.@Day == $WOE_CONTROL[.@i] && ((.@Start >= $WOE_CONTROL[.@i + 1] && .@Start < $WOE_CONTROL[.@i + 2]) || (.@End > $WOE_CONTROL[.@i + 1] && .@End <= $WOE_CONTROL[.@i + 2]) || (.@Start <= $WOE_CONTROL[.@i + 1] && .@End >= $WOE_CONTROL[.@i + 2]))) {
										mes "[ ^00a8ffNew Session^000000 ]";
										mes "The chosen times overlap with an existing session.";
										next;
										set .@d, 1;
										break;
									}
								}
								if (.@d) {
									set .@d, 0;
									break;
								}
								set .@Castle, 0;
								while(1) {
									mes "^ff0000[New Session]^000000";
									mes "^0055FF" + .Days$[.@Day] + " (" + Add_Zero(.@Start) + "-" + Add_Zero(.@End) + ")^000000";
									mes " > Castles:";
									if (!.@Castle) {
										mes "  ^00CC00•^000000 ^777777(none selected)^000000";
									} else {
										for (set .@i, 0; .@i < 30; set .@i, .@i + 1) {
											if (.@Castle&(1<<.@i)) {
												mes "  ^00CC00•^000000 " + getcastlename(.Castles$[.@i]) + " (" + .Castles$[.@i] + ")";
											}
										}
									}
									next;
									set .@menu$, ((.@Castle) ? "^00CC00•^000000 ^FF0000Finished...^000000" : "") + ":";
									for (set .@i, 0; .@i < 30; set .@i, .@i + 1) {
										set .@menu$, .@menu$ + "^00CC00•^000000 " + ((.@Castle&(1<<.@i)) ? "^0055FF" : "") + getcastlename(.Castles$[.@i]) + " (" + .Castles$[.@i] + ")^000000:";
									}
									set .@i, select(.@menu$) - 1;
									if (.@i) {
										set .@Castle, .@Castle^(1<<(.@i - 1));
									} else {
										mes "^ff0000[New Session]^000000";
										mes "Are you sure?";
										next;
										switch(select("^00CC00•^000000 ^0055FFAdd session...^000000:^00CC00•^000000 Continue selecting castles...:^00CC00•^000000 ^777777Cancel^000000")) {
											case 1:
												for (set .@i, 0; .@i < .Size; set .@i, .@i + 4) {
													if ((.@Day == $WOE_CONTROL[.@i] && .@End <= $WOE_CONTROL[.@i + 1]) || .@Day < $WOE_CONTROL[.@i]) {
														set .@d, 1;
														break;
													}
												}
												if (!.@d) {
													set .@d, 1;
													set .@i, .Size;
												}
												copyarray $WOE_CONTROL[.@i + 4], $WOE_CONTROL[.@i], .Size - .@i;
												setarray $WOE_CONTROL[.@i], .@Day, .@Start, .@End, .@Castle;
												set .Size, getarraysize($WOE_CONTROL);
											
											case 3:
												mes "^ff0000[New Session]^000000";
												mes ((.@d) ? "Session added." : "Cancelled.");
												next;
												set .@d, 1;
											
											case 2:
												break;
										}
										if (.@d) {
											set .@d, 0;
											break;
										}
									}
								}
								break;
							case 2:
								mes "[ ^a60536Remove Session^000000 ]";
								if (!.Size) {
									mes "There are no sessions configured.";
									next;
									break;
								}
								mes "Select a session to remove.";
								next;
								set .@menu$, "";
								for (set .@i, 0; .@i < .Size; set .@i, .@i + 4) {
									set .@menu$, .@menu$ + "^00CC00•^000000 " + .Days$[$WOE_CONTROL[.@i]] + " (" + Add_Zero($WOE_CONTROL[.@i + 1], 1) + "-" + Add_Zero($WOE_CONTROL[.@i + 2], 1) + "):";
								}
								set .@menu$, .@menu$ + "^00CC00•^000000 ^777777Cancel^000000";
								set .@i, select(.@menu$) - 1;
								if (.@i == (.Size / 4)) {
									break;
								}
								mes "[ ^00a8ffRemove Session^000000 ]";
								mes "Delete ^0055FF" + .Days$[$WOE_CONTROL[.@i * 4]] + "'s^000000 session?";
								mes "This action cannot be undone.";
								next;
								set .@j, select("^00CC00•^000000 ^FF0000Delete session...^000000:^00CC00•^000000 ^777777Cancel^000000");
								mes "[ ^a60536Remove Session^000000 ]";
								if (.@j == 2) {
									mes "Cancelled.";
								} else {
									deletearray $WOE_CONTROL[.@i * 4], 4;
									set .Size, getarraysize($WOE_CONTROL);
									mes "Session deleted.";
								}
								next;
								break;
							
							case 3:
								mes "[ ^a60536Reload Settings^000000 ]";
								mes "This will trigger all events related to new session configurations, if any.";
								if (agitcheck() || agitcheck2()) {
									mes " ";
									mes "Be aware that this will disrupt the current WOE session.";
								}
								next;
								set .@i, select("^00CC00•^000000 ^0055FFReload settings...^000000:^00CC00•^000000 ^777777Cancel^000000");
								mes "[ ^a60536Reload Settings^000000 ]";
								if (.@i == 2) {
									mes "Cancelled.";
								} else {
									set .Init, 1;
									donpcevent "WOE_CONTROL::OnMinute00";
									mes "Variables have been re-initialized.";
								}
								next;
								break;
							
							case 4:
								mes "[ ^a60536Force Agit End^000000 ]";
								if (!agitcheck() && !agitcheck2())  {
									mes "WOE has already ended.";
									next;
									break;
								}
								mes "This command will safely execute all AgitEnd events.";
								mes " ";
								mes "Kill the current WOE session?";
								next;
								set .@i, select("^00CC00•^000000 ^FF0000End session...^000000:" + ((.Reward[0]) ? "^00CC00•^000000 ^FF0000End session without rewards...^000000" : "") + ":^00CC00•^000000 ^777777Cancel^000000");
								mes "[ ^a60536Force Agit End^000000 ]";
								if (.@i == 3) {
									mes "Cancelled.";
								} else {
									set .ForceEnd, .@i;
									donpcevent "WOE_CONTROL::OnWOEEnd";
									mes "WOE session terminated.";
								}
								next;
								break;
							case 5:
								set .@d, 1;
							break;
						}
						if (.@d) {
							set .@d, 0;
							break;
						}
				}
				break;
				case 6:
					close;
			}
		}
	end;
}