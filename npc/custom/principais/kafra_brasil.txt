prontera,153,196,5	script	Kafra Aurora	758,{
	set .n$, "^0099FF[ "+strnpcinfo(1)+" ]^000000";
	set $@JC_MinimumJB,40; 	//Minimum job level for changing between 2nd and advance Class (Default : 40)
	set $@JC_Plat,1; 	//Give Platinum skills on Jobchange (Default : 1-yes)
	set $@JC_SupNovM,45; 	//Base Level to change into Super Novice (Default : 45)

	mes .n$;
	mes (gettime(3)>= 6&&gettime(3)<= 12?"Bom-dia":(gettime(3)>=13&&gettime(3)<=18?"Boa-tarde":"Boa-noite"))+", ^EEAD0E"+ strcharinfo(0)+"^000000!";
	mes "Tenho um contrato exclusivo para ajudar os jogadores do ^00CC00Brasil Ragnarök Online^000000.";
	mes "^777777- Posição^000000: ^0099FF("+getsavepoint(0)+", "+getsavepoint(1)+", "+getsavepoint(2)+")^000000.";
	mes "^777777- Calendário^000000: ^0099FF("+gettimestr("%I:%M%p ",10) + gettime(5) + gettimestr(" %B ",15) + gettime(7)+")^000000.";
	mes "^777777Diga-me em que posso te ajudar:^000000";
	next;
	switch(select("^00CC00•^000000 Abrir Armazém ^EEAD0E(500 Zenys).^000000","^00CC00•^000000 Salvar Ponto de Retorno.","^00CC00•^000000 Classes ^8B0A50Transcendentais^000000 ^777777|^000000 ^CD1076Expandidas.^000000","^00CC00•^000000 Classes ^8B008BBebê.^000000","^00CC00•^000000 Carrinho ^777777|^000000 Falcão ^777777|^000000 Peco.","^00CC00•^000000 Resetar Habilidades ^777777|^000000 Skills.","^00CC00•^000000 Remover Habilidades.","^00CC00•^000000 Habilidades de Platina.","^00CC00•^000000 Quest Kafra ^1E90FFB^EE9A00R^000000^008B45O.^000000","^00CC00•^000000 Saír.")){
		case 9:
			mes .n$;			
			if( #q_kafra ){
				mes "Parece que você já realizou nossa Quest!";
				close;
			}
			mes "Separamos uma quest exclusiva pra você! O equipamento disponível é ^EEAD0E"+ getitemname(607) +"^000000 e para recebe-lo você deverá matar ^00CC00600x "+ getmonsterinfo( 1002,MOB_NAME ) +"^000000.";
			next;
			if( select("^00CC00•^000000 Finalizar Quest.:^00CC00•^000000 Saír.") == 1 ){
				mes .n$;
				mes "Foram derrotados ^00CC00"+ q_kafra +"x^000000 monstros!"; 
				if( q_kafra < 10 ){ 
					mes "^2596C2Você precisa matar mais monstros para concluír a Quest.^000000"; 
					close; 
				}
				if( #q_kafra ) close;
				announce "[Coorp. Kafra]: "+ strcharinfo(0) +" acabou de fazer sua Quest Kafra!", bc_all|bc_blue;
				next;
				mes .n$;
				mes "Parabéns, aqui está sua Quest!";
				set #q_kafra, 1;
				getitem 607, 1;
				close;
			}
			close;
			
		case 1: // Abrir Storage
			mes .n$;
			if( Zeny < 500 ){
				mes "Você não tem dinheiro suficiente.";
				mes "^777777- Taxa do Armazém^000000: ^0099FF500 Zenys.^000000";
				close;
			}
			mes "Certo, vou liberar o seu armazém.";
			Zeny -= 500;
			close2;
			openstorage;
			end;

		case 2: // Salvar Ponto de Retorno
			mes .n$;
			mes "Seu ponto de retorno foi atualizado.";
			close2;
			SavePoint "prontera", 156, 191;
			end;

		case 3: // Mestre das Classes
			mes .n$;
			if(Upper == 1 && Class >= Job_Lord_Knight){
				mes "Sinto muito, você não possui todos os requisitos para mudar de classe.";
				close;
			}
			if(SkillPoint != 0){
				mes "Me desculpe, você tem que usar todos os seus pontos de habilidade antes de mudar de classe.";
				close;
			}
			if(JobLevel < 10){
				mes "Sinto muito, mas você não parece que possui nivel suficiente de Job.";
				close;
			}
			switch(Class){
				case Job_Novice_High:
				case Job_Baby:
				case Job_Novice:
					skill 142,1,0;
					skill 143,1,0;
					mes "Por favor selecione a classe em que você deseja se transformar.";
					if(lastJob != 0 && Class == Job_Novice_High){
						switch(lastJob){
							case Job_Knight:
							case Job_Crusader:
								set @target_job, Job_Swordman_High;
								break;
							case Job_Monk:
							case Job_Priest:
								set @target_job, Job_Acolyte_High;
								break;
							case Job_Alchemist:
							case Job_Blacksmith:
								set @target_job, Job_Merchant_High;
								break;
							case Job_Rogue:
							case Job_Assassin:
								set @target_job, Job_Thief_High;
								break;
							case Job_Wizard:
							case Job_Sage:
								set @target_job, Job_Mage_High;
								break;
							case Job_Hunter:
							case Job_Bard:
							case Job_Dancer:
								set @target_job, Job_Archer_High;
								break;
								}
					}else{
						switch(select("^00CC00•^000000 Espadachim.","^00CC00•^000000 Mago.","^00CC00•^000000 Arqueiro.","^00CC00•^000000 Noviço.","^00CC00•^000000 Mercador.","^00CC00•^000000 Gatuno.","^00CC00•^000000 Super Aprendiz.","^00CC00•^000000 Taekwon.","^00CC00•^000000 Guns.","^00CC00•^000000 Ninja.")){
								case 7:
									if(Class == Job_Novice_High){
										mes .n$;
										mes "Sinto muito, você não possui todos os requisitos para mudar de classe.";
										close;
									}
									if($@JC_SupNovM > BaseLevel){
										mes .n$;
										mes "Sinto muito, mas você não parece que possui nivel suficiente de Base.";
										close;
									}
									if(Upper == 2)
										set @target_job,Job_Super_Baby;
									else
										set @target_job,Job_SuperNovice;
									break;
								case 8:
									if(Class == Job_Novice_High){
										mes .n$;
										mes "Sinto muito, você não possui todos os requisitos para mudar de classe.";
										close;
									}
									if(Upper == 2){
										mes .n$;
										mes "Sinto muito, você não possui todos os requisitos para mudar de classe.";
										close;
									}
									set @target_job,Job_Taekwon;
									break;
								case 9:
								case 10:
									if(Class == Job_Novice_High || Upper == 2){
										mes .n$;
										mes "Sinto muito, você não possui todos os requisitos para mudar de classe.";
										close;
									}
									set @target_job,@menu + 15;
									break;
								default:
									set @target_job,@menu;
									if(Class == Job_Novice_High) set @target_job,@target_job + 4001;
									break;
							}
					}
					mes "Tem certeza de que quer se transformar em ^CD1076"+JobName(@target_job)+"^000000?";
					if(select("^00CC00•^000000 Não.","^00CC00•^000000 Sim.") == 2){
						callfunc "Job_Change", @target_job;
						if(@target_job == Job_Gunslinger || @target_job == Job_Ninja || @target_job == Job_Taekwon){
							callfunc "F_ClearJobVar";
						} else {
							if($@JC_Plat) goto L_GivePlat;
						}
					}
					close;
					break;
				default:
					if(JobLevel < $@JC_MinimumJB){
						mes .n$;
						mes "Sinto muito, mas você não parece que possui nivel suficiente de Job.";
						close;
					}
					deletearray @job_opt,getarraysize(@job_opt);
					if(Class < Job_Knight || Class == Job_Taekwon || (Class > Job_Baby && Class < Job_Baby_Knight) || (Class > Job_Novice_High && Class < Job_Lord_Knight)){
						if(lastJob != 0){
							set @target_job,lastJob + 4001;
						}else{
							switch(Class){
								case Job_Swordman_High:
								case Job_Baby_Swordman:
								case Job_Swordman:
									set @job_opt[0],Job_Knight;
									set @job_opt[1],Job_Crusader;
									break;
								case Job_Mage_High:
								case Job_Baby_Mage:
								case Job_Mage:
									set @job_opt[0],Job_Wizard;
									set @job_opt[1],Job_Sage;
									break;
								case Job_Archer_High:
								case Job_Baby_Archer:
								case Job_Archer:
									set @job_opt[0],Job_Hunter;
									if(Sex == 0)
										set @job_opt[1],Job_Dancer;
									else
										set @job_opt[1],Job_Bard;
									break;
								case Job_Acolyte_High:
								case Job_Baby_Acolyte:
								case Job_Acolyte:
									set @job_opt[0],Job_Priest;
									set @job_opt[1],Job_Monk;
									break;
								case Job_Merchant_High:
								case Job_Baby_Merchant:
								case Job_Merchant:
									set @job_opt[0],Job_Blacksmith;
									set @job_opt[1],Job_Alchemist;
									break;
								case Job_Thief_High:
								case Job_Baby_Thief:
								case Job_Thief:
									set @job_opt[0],Job_Assassin;
									set @job_opt[1],Job_Rogue;
									break;						
								default:
									set @job_opt[0],Job_Star_Gladiator;
									set @job_opt[1],Job_Soul_Linker;
									break;
							}
							mes "Por favor selecione a classe em que você deseja se transformar.";
							set @target_job, @job_opt[select(JobName(@job_opt[0]),JobName(@job_opt[1]))-1];
							if(Class > Job_Novice_High && Class < Job_Lord_Knight) set @target_job,@target_job + 4001;
						}
						mes "Você têm certeza que você deseja se transformar em "+JobName(@target_job)+"?";
						if(select("^00CC00•^000000 Não.","^00CC00•^000000 Sim.") == 2){
							callfunc "Job_Change",@target_job;
							if(@target_job == Job_Star_Gladiator || @target_job == Job_Soul_Linker){
								callfunc "F_ClearJobVar";
							}else{
								if($@JC_Plat) goto L_GivePlat;
							}
						}
						close;
					}
					if(checkfalcon() || checkcart() || checkriding()){
						mes .n$;
						mes "Por favor, remova o seu carrinho, falcão ou peco.";
						close;
					}
					if((Class >=Job_Knight) && (Class <=Job_Crusader2)){
						mes "Você quer renascer?";
						if(select("^00CC00•^000000 Sim.","^00CC00•^000000 Não.") == 1){
							if(BaseLevel < 99 || JobLevel < 50){
								mes .n$;
								mes "Sinto muito, você não possui todos os requisitos para mudar de classe.";
								close;
							}
							set lastJob, Class;
							if(Class == Job_Knight2){
								set lastJob,Job_Knight;
							} else {
								if(Class == Job_Crusader2){
									set lastJob,Job_Crusader;
								}
							}
							jobchange Job_Novice_High;
							resetlvl(1);
							skill 142,1,0;
							skill 143,1,0;
						}
						close;
						}
			}
			mes "Sinto muito, não há mais como mudar de classe.";
			close;
		case 4:
			if((Class == 0) && (JobLevel >9)){
				mes .n$;
				mes "^777777- JobLevel: ^0099FF"+JobLevel+".^000000";
				mes "^777777- Class: ^0099FF"+Class+".^000000";
				switch(select("^00CC00•^000000 Bebê Novice.","^00CC00•^000000 Saír.")){
					case 1:
						jobchange 4023;
						break;
					case 2:
						mes "Volte quando precisar!";
						break;
					}
			}else if((Class == 4023) && (JobLevel >9)){
				switch(select("^00CC00•^000000 Bebê Cavaleiro.","^00CC00•^000000 Bebê Mago.","^00CC00•^000000 Bebê Aqueiro.","^00CC00•^000000 Bebê Noviço.","^00CC00•^000000 Bebê Mercador.","^00CC00•^000000 Bebê Gatuno.","^00CC00•^000000 Bebê Super Aprendiz.","^00CC00•^000000 Saír.")){
					case 1:
						jobchange 4024;
						break;
					case 2:
						jobchange 4025;
						break;
					case 3:
						jobchange 4026;
						break;
					case 4:
						jobchange 4027;
						break;
					case 5:
						jobchange 4028;
						break;
					case 6:
						jobchange 4029;
						break;
					case 7:
						jobchange 4045;
						break;
					case 8:
						mes "Volte quando precisar!";
						break;
					}
			}else if((Class == 4024) && (JobLevel >39)){
				switch(select("^00CC00•^000000 Bebê Knight.","^00CC00•^000000 Bebê Crusader.","^00CC00•^000000 Saír.")){
					case 1:
						jobchange 4030;
						break;
					case 2:
						jobchange 4037;
						break;
					case 3:
						mes "Volte quando precisar!";
						break;
					}
			}else if((Class == 4025) && (JobLevel >39)){
				switch(select("^00CC00•^000000 Bebê Wizard.","^00CC00•^000000 Bebê Sage.","Nada.")){
					case 1:
						jobchange 4032;
						break;
					case 2:
						jobchange 4039;
						break;
					case 3:
						mes "Volte quando precisar!";
						break;
					}
			}else if((Class == 4026) && (JobLevel >39)){
				switch(select("^00CC00•^000000 Bebê Hunter.","^00CC00•^000000 Bebê Bard.","^00CC00•^000000 Bebê Dancer.","^00CC00•^000000 Saír.")){
					case 1:
						jobchange 4034;
						break;
					case 2:
						jobchange 4042;
						break;
					case 3:
						jobchange 4043;
						break;
					case 4:
						mes "Volte quando precisar!";
						break;
					}
			}else if((Class == 4027) && (JobLevel >39)){
				switch(select("^00CC00•^000000 Bebê Priest.","^00CC00•^000000 Bebê Monk.","^00CC00•^000000 Saír.")){
					case 1:
						jobchange 4031;
						break;
					case 2:
						jobchange 4038;
						break;
					case 3:
						mes "Volte quando precisar!";
						break;
					}
			}else if((Class == 4028) & (JobLevel > 39)){
				switch(select("^00CC00•^000000 Bebê Blacksmith.","^00CC00•^000000 Bebê Alchemist.","^00CC00•^000000 Saír.")){
					case 1:
						jobchange 4033;
						break;
					case 2:
						jobchange 4041;
						break;
					case 3:
						mes "Volte quando precisar!";
						break;
					}
			}else if((Class == 4029) && (JobLevel > 39)){
				switch(select("^00CC00•^000000 Bebê Assassin.","^00CC00•^000000 Bebê Rogue.","^00CC00•^000000 Saír.")){
					case 1:
						jobchange 4035;
						break;
					case 2:
						jobchange 4040;
						break;
					case 3:
						mes "Volte quando precisar!";
						break;
					}
			}else
				mes .n$;
				mes "Não posso ajudar você, desculpe!";
				close;
		case 5: 
			mes .n$;
			mes "Você pode alugar Carrinhos, Falcões ou Pecos.";
			mes "^777777Qual desses você deseja alugar?^000000";
			next;
			switch(select("^00CC00•^000000 Carrinho.:^00CC00•^000000 Falcão.:^00CC00•^000000 Peco.")) {
				case 1:
					if((BaseClass == Job_Merchant || BaseJob == Job_SuperNovice) && checkcart() == 0 && getskilllv("MC_PUSHCART")>0){
						setcart;
						close;
					}else{
						mes .n$;
						mes "Desculpa "+strcharinfo(0)+", certifique-se que você possui a habilidade e se você está com a classe necessária.";
						close;
					}
				case 2:
					if(BaseJob != Job_Archer && BaseClass == Job_Archer && checkfalcon() == 0 && getskilllv("HT_FALCON")>0){
						setfalcon;
						close;
					}else{
						mes .n$;
						mes "Desculpa "+strcharinfo(0)+", certifique-se que você possui a habilidade e se você está com a classe necessária.";
						close;
					}					
				case 3:
					if(BaseJob != Job_Swordman && BaseClass == Job_Swordman && checkriding() == 0 && getskilllv("KN_RIDING")>0){
						setriding;
						close;
					}else{
						mes .n$;
						mes "Desculpa "+strcharinfo(0)+", certifique-se que você possui a habilidade e se você está com a classe necessária.";
						close;
					}
			}
		case 6: // Resetadora
			mes .n$;
			mes "^777777- Resetar Atributos^000000: ^0000FF500.000^000000z";
			mes "^777777- Resetar Habilidades^000000: ^0000FF500.000^000000z";
			mes "^777777- Resetar Ambos^000000: ^0000FF900.000^000000z";
			mes "^777777Selecione o serviço que você quer:";
			next;
			switch(select("^00CC00•^000000 Resetar Habilidades.:^00CC00•^000000 Resetar Atributos.:^00CC00•^000000 Resetar Ambos.:^00CC00•^000000 Sair.")) {
				case 1:
					mes .n$;
					if(Zeny < 500000){ 
						mes "Você não possui zeny suficiente."; 
						close; 
					}
					mes "Prontinho! Reset concluído.";
					set Zeny,Zeny - 500000;
					ResetSkill;
					close;
				case 2:
					mes .n$;
					if(Zeny < 500000){ 
						mes "Você não possui zeny suficiente."; 
						close; 
					}
					mes "Prontinho! Reset concluído.";
					set Zeny,Zeny - 500000;
					ResetStatus;
					close;
				case 3:
					mes .n$;
					if(Zeny < 900000){ 
						mes "Você não possui zeny suficiente."; 
						close; 
					}
					mes "Prontinho! Reset concluído.";
					set Zeny,Zeny - 900000;
					ResetSkill;
					ResetStatus;
					close;
				case 4:
					close;
			}

		case 7: // Removedora de Habilidades
			mes .n$;
			mes "Deseja remover seus pontos de habilidades que estão sobrando?";
			next;
			if(select("^00CC00•^000000 Sim.:^00CC00•^000000 Não.") == 2) close;
				mes .n$;
				if(SkillPoint < 1){ 
					mes "Você não possui pontos de habilidades sobrando."; 
					close; 
				}
				mes "Como você deseja remove-los?";
				next;
				switch(select("^00CC00•^000000 Remover Tudo.:^00CC00•^000000 Remover Quantidade.:^00CC00•^000000 Cancelar.")){
					mes .n$;
				case 1:
					mes "Pontos removidos.";
					set SkillPoint,SkillPoint - SkillPoint;
					close;
				case 2:
					mes "Digite quantos pontos você gostaria de remover.";
					input @skillpoint_qnt;
					next;
					mes .n$;
					mes "Pontos removidos.";
					set SkillPoint,SkillPoint - @skillpoint_qnt;
 					close;
				case 3:
					close;
			}

		case 8:
			mes .n$;
			mes "Eu posso te dar as habilidades especiais para sua classe.";
			mes "^777777Você gostaria de recebê-los agora?^000000";
			next;
			if(select("^00CC00•^000000 Sim.:^00CC00•^000000 Não.") == 2){
				close; 
			}
			skill 142,1,0;
			switch(BaseClass){
				case 0: if (Class !=23) skill 143,1,0; break;
				case 1: skill 144,1,0; skill 145,1,0; skill 146,1,0; break;
				case 2: skill 157,1,0; break;
				case 3: skill 147,1,0; skill 148,1,0; break;
				case 4: skill 156,2,0; break;
				case 5: skill 153,1,0; skill 154,1,0; skill 155,1,0; break;
				case 6: skill 149,1,0; skill 150,1,0; skill 151,1,0; skill 152,1,0; break;
				default: break; 
			}
			switch(roclass(eaclass()&EAJ_UPPERMASK)){
				case 7: skill 1001,1,0; break;
				case 8: skill 1014,1,0; break;
				case 9: skill 1006,1,0; break;
				case 10: skill 1012,1,0; skill 1013,1,0; break;
				case 11: skill 1009,1,0; break;
				case 12: skill 1003,1,0; skill 1004,1,0; break;
				case 14: skill 1002,1,0; break;
				case 15: skill 1015,1,0; skill 1016,1,0; break;
				case 16: skill 1007,1,0; skill 1008,1,0; skill 1017,1,0; skill 1018,1,0; skill 1019,1,0; break;
				case 17: skill 1005,1,0; break;
				case 18: skill 238,1,0; break;
				case 19: skill 1010,1,0; break;
				case 20: skill 1011,1,0; break;
				default: break; 
			}
			mes .n$;
			mes "Aqui está!";
			close;
			end;
		case 10:
			close;
	}
	OnNPCKillEvent:
	if( killedrid == 1002 ){ 
		if( q_kafra < 10 ){
			set q_kafra, q_kafra + 1; 
			dispbottom "[Quest Kafra]: Derrote ("+ q_kafra +"/10) "+ getmonsterinfo( 1002,MOB_NAME ) +".",0x00FFFF;
			end;
		} else {
			dispbottom "[Quest Kafra]: Você já matou 10x "+ getmonsterinfo( 1002,MOB_NAME ) +" necessários. Quest concluída!",0x00FFFF;
			end;
		}
		end;
	}
	OnInit:
		while(1){ emotion 1; sleep 5000; }
	L_GivePlat:
		if(BaseClass == Job_SuperNovice) goto L_sSuperN;
		if(BaseClass == Job_Swordman) goto L_sSword;
		if(BaseClass == Job_Mage) goto L_sMage;
		if(BaseClass == Job_Archer) goto L_sArcher;
		if(BaseClass == Job_Acolyte) goto L_sAcolyte;
		if(BaseClass == Job_Merchant) goto L_sMerchant;
		if(BaseClass == Job_Thief) goto L_sThief;
		close;
	L_sSuperN:
		skill 142,1,0;
		close;
	L_sSword:
		skill 142,1,0;
		skill 144,1,0;
		skill 145,1,0;
		skill 146,1,0;
		close;
	L_sMage:
		skill 142,1,0;
		skill 157,1,0;
		close;
	L_sArcher:
		skill 142,1,0;
		skill 147,1,0;
		skill 148,1,0;
		close;
	L_sAcolyte:
		skill 142,1,0;
		skill 156,2,0;
	L_sMerchant:
		skill 142,1,0;
		skill 153,1,0;
		skill 154,1,0;
		skill 155,1,0;
		close;
	L_sThief:
		skill 142,1,0;
		skill 149,1,0;
		skill 150,1,0;
		skill 151,1,0;
		skill 152,1,0;
		close;
}